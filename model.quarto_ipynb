{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Illustrating Model Properties\"\n",
        "---\n",
        "\n",
        "\n",
        "# Diagnose Time Prior and Evolution of Midline Extension\n",
        "\n",
        "First, we illustrate how the prior distribution over diagnose times and the conditional distribution of having developed a tumor that crosses the mid-sagittal line *given* a diagnosis time evolve together.\n"
      ],
      "id": "b5d770ad"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-model-midext-evo\n",
        "#| fig-cap: 'The top panel shows the prior probability to get diagnosed at time-step $t$ for early and late T-category tumors as bars. Also in the top panel, we plot the conditional probability of the tumor''s midline extension ($\\epsilon=\\texttt{True}$), given the time-step $t$ as a line plot. In the bottom panel, we show the joint probability of getting diagnosed in time-step $t$ *and* having a tumor that crosses the midline.'\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib import ticker\n",
        "from lyscripts.plot.utils import COLORS\n",
        "from scripts import shared\n",
        "\n",
        "midline_model = shared.get_model(\"midline\", load_samples=True)\n",
        "\n",
        "t = np.linspace(0, 10, 11)\n",
        "p_midline = {\n",
        "  \"lateralized\": (1 - midline_model.midext_prob)**t,\n",
        "  \"extension\": 1 - (1 - midline_model.midext_prob)**t,\n",
        "}\n",
        "dist = {\n",
        "  \"early\": midline_model.get_distribution(\"early\").pmf,\n",
        "  \"late\": midline_model.get_distribution(\"late\").pmf,\n",
        "}\n",
        "p_colors = {\"lateralized\": COLORS[\"green\"], \"extension\": COLORS[\"red\"]}\n",
        "t_colors = {\"early\": COLORS[\"blue\"], \"late\": COLORS[\"orange\"]}\n",
        "markers = {}\n",
        "\n",
        "nrows, ncols = 2, 1\n",
        "plt.rcParams.update(shared.get_fontsizes())\n",
        "plt.rcParams.update(shared.get_figsizes(\n",
        "  nrows=nrows,\n",
        "  ncols=ncols,\n",
        "  width=17/2,\n",
        "  aspect_ratio=2.5,\n",
        "))\n",
        "\n",
        "fig, axes = plt.subplots(nrows=nrows, ncols=ncols, sharex=True)\n",
        "w = 0.3\n",
        "\n",
        "for label, p in p_midline.items():\n",
        "  axes[0].plot(\n",
        "    t, p_midline[label], \"o-\",\n",
        "    label=f\"cond. prob. $P(\\epsilon={label=='extension'} \\mid t)$\",\n",
        "    color=p_colors[label],\n",
        "  )\n",
        "  for i, t_stage in enumerate([\"early\", \"late\"]):\n",
        "    if label == \"lateralized\":\n",
        "      axes[0].bar(\n",
        "        t + i*w - w/2, dist[t_stage],\n",
        "        color=t_colors[t_stage],\n",
        "        width=w,\n",
        "        label=f\"{t_stage} T-cat. prior $P(t)$\",\n",
        "      )\n",
        "    axes[1].plot(\n",
        "      t, p * dist[t_stage], \"o-\",\n",
        "      c=p_colors[label],\n",
        "      mfc=t_colors[t_stage],\n",
        "      mec=t_colors[t_stage],\n",
        "      label=f\"{label} ($\\epsilon={label=='extension'}$) for {t_stage} T-cat.\",\n",
        "    )\n",
        "\n",
        "axes[0].set_ylim(0., 1.)\n",
        "axes[0].yaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:.0%}\"))\n",
        "axes[0].set_ylabel(\"probability\")\n",
        "axes[0].grid(axis=\"y\", color=COLORS[\"gray\"], alpha=0.5)\n",
        "\n",
        "axes[0].legend()\n",
        "\n",
        "axes[1].set_xlim(min(t), max(t))\n",
        "axes[1].set_xticks(t)\n",
        "axes[1].set_xlabel(\"time-step $t$\")\n",
        "\n",
        "axes[1].set_ylim(0., 0.25)\n",
        "axes[1].yaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:.0%}\"))\n",
        "axes[1].set_ylabel(\"joint probability $P(\\epsilon, t)$\")\n",
        "axes[1].grid(axis=\"y\", color=COLORS[\"gray\"], alpha=0.5)\n",
        "\n",
        "axes[1].legend()\n",
        "\n",
        "plt.show()"
      ],
      "id": "fig-model-midext-evo",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Sampling History\n",
        "\n",
        "For bookeeping, we also show how different quantities evolve during the burnin of the sampling. For example, the ratio of proposed samples that were accepted or the autocorrelation time.\n"
      ],
      "id": "2882a203"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: fig-model-burnin-history\n",
        "#| fig-cap: Monitoring quantities during the burn-in phase of the parameter sampling.\n",
        "from collections import namedtuple\n",
        "import pandas as pd\n",
        "\n",
        "def custom(x, pos):\n",
        "  return \"{:.1f}\".format(x/1000)\n",
        "\n",
        "nrows, ncols = 1, 3\n",
        "label_map = {\n",
        "  \"acor_times\": \"autocorrelation [steps]\",\n",
        "  \"accept_fracs\": \"acceptance fraction [%]\",\n",
        "  \"max_log_probs\": r\"max. log-likelihood [$\\times 10^3$]\",\n",
        "}\n",
        "\n",
        "plt.rcParams.update(shared.get_fontsizes())\n",
        "plt.rcParams.update(shared.get_figsizes(\n",
        "  nrows=nrows,\n",
        "  ncols=ncols,\n",
        "  aspect_ratio=1.,\n",
        "  width=17,\n",
        "))\n",
        "\n",
        "fig, axes = plt.subplots(\n",
        "  nrows=nrows,\n",
        "  ncols=ncols,\n",
        "  sharex=True,\n",
        ")\n",
        "\n",
        "for model in [\"contra\", \"bilateral\", \"midline\"]:\n",
        "  history = pd.read_csv(f\"models/{model}/history.csv\").set_index(\"steps\")\n",
        "  for i, column in enumerate(history.columns):\n",
        "    history.plot(y=column, ax=axes[i], label=model)\n",
        "    axes[i].autoscale(enable=True, tight=True, axis=\"x\")\n",
        "    axes[i].set_ylabel(label_map[column])\n",
        "    axes[i].xaxis.set_major_formatter(ticker.FuncFormatter(custom))\n",
        "    axes[i].set_xlabel(r\"steps [$\\times 10^3$]\")\n",
        "\n",
        "axes[1].yaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:.0%}\"))\n",
        "axes[2].yaxis.set_major_formatter(ticker.FuncFormatter(custom))\n",
        "plt.show()"
      ],
      "id": "fig-model-burnin-history",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/rmnldwg/repos/bilateral-paper/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}