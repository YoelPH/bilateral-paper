---
title: "Probabilistic Model of Bilateral Lymphatic Spread in Head and Neck Cancer"
authors:
  - name: Roman Ludwig
    orcid: 0000-0001-9434-328X
    email: roman.ludwig@usz.ch
  - name: Yoel Perez Haas
    email: yoel.perezhaas@usz.ch
  - name: Jan Unkelbach
    orcid: 0000-0002-4275-990X
    email: jan.unkelbach@usz.ch
format:
  html:
    code-fold: true
jupyter: python3
---

# Introduction

- head and neck cancer spreads lymphatically
- may sometimes spread to contralateral side
- spreads more frequently and to larger extent contralaterally when tumor extends the mid-sagittal line
- we describe a model based on previously published hidden Markov model
- we extend it to cover the contralateral side, too
- ipsi- and contralateral side are correlated via time of diagnosis, which is correlated with T-category
- tumor extension over mid-sagittal line is modelled as random variable
- spread probabilities from tumor to contralateral LNLs in case of midline extesnion are linear combinations of these probabilities in case of ipsilateral spread and contralateral spread when tumor is clearly lateralized


# Methods

Prepare the model and load the data:

```{python}
import numpy as np
import pandas as pd
from emcee import EnsembleSampler, backends, moves
from corner import corner

from lymph import models
from lyscripts.utils import binom_pmf, parametric_binom_pmf

np.random.seed(42)
```

```{python}
graph_dict = {
  ("tumor", "T"): ["II", "III"],
  ("lnl", "II"): ["III"],
  ("lnl", "III"): [],
}
model = models.Midline(
  graph_dict=graph_dict,
  is_symmetric={"lnl_spread": True},
  use_mixing=True,
  use_central=False,
  use_midext_evo=True,
)
model.set_modality("max_llh", spec=1.0, sens=1.0)
model.set_distribution(
  "early",
  binom_pmf(np.arange(model.max_time+1), model.max_time, p=0.3),
)
model.set_distribution("late", parametric_binom_pmf)
model.load_patient_data(
  pd.read_csv("data/enhanced.csv", header=[0,1,2]),
)
```


Do the sampling:

```{python}
ndim = model.get_num_dims()
initial = np.random.uniform(size=(20 * ndim, ndim))

backend = backends.HDFBackend(filename="models/midline.hdf5")
moves_mix = [(moves.DEMove(), 0.8), (moves.DESnookerMove(), 0.2)]
sampler = EnsembleSampler(
  nwalkers=20 * ndim,
  ndim=ndim,
  log_prob_fn=model.likelihood,
  backend=backend,
  moves=moves_mix,
  parameter_names=list(model.get_params().keys())[:ndim],
)
sampler.run_mcmc(initial, 1000, progress=True)
```


Look at the results:

```{python}
backend = backends.HDFBackend(
  filename="models/midline.hdf5",
  read_only=True,
)

samples = backend.get_chain(discard=500, thin=10, flat=True)
corner(
  samples,
  titles=list(model.get_params().keys()),
  show_titles=True,
);
```


```{python}
mean_samples = {
  k: s.mean() for k, s in zip(model.get_params(), samples.T)
}
model.set_params(**mean_samples)
```


NOTE: For the `Bilateral` model the results look absolutely plausible, but the `Midline` model seems to have some issues (`late_p` was learned to be 0.17 !?).
