---
title: "Probabilistic Model of Bilateral Lymphatic Spread in Head and Neck Cancer"
---

```{python}
#| echo: false
import re

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import ticker
from matplotlib.colors import LinearSegmentedColormap
import upsetplot

from lymph import models
from lyscripts import utils
from lyscripts.plot.utils import COLORS

from scripts import shared, paths, COL, get_lnl_cols

midline_model = shared.get_model("midline", load_samples=True)
```

```{python}
#| tags: [parameters]
#| echo: false

# width of figures. May depend on number of text columns
full = 17 # cm
half = full
# half =  8 # cm
```

# Introduction

- head and neck cancer spreads through the lymphatic network
- may sometimes spread to contralateral side
- spreads more frequently and to larger extent contralaterally when tumor extends the mid-sagittal line
- we describe a model based on previously published hidden Markov model
- we extend it to cover the contralateral side, too
- naive approach: make two independent models for each side, but that is not supported by the data
- ipsi- and contralateral side are correlated via time of diagnosis, which is correlated with T-category
- tumor extension over mid-sagittal line is modelled as random variable
- spread probabilities from tumor to contralateral LNLs in case of midline extesnion are linear combinations of these probabilities in case of ipsilateral spread and contralateral spread when tumor is clearly lateralized


# Data on Lymphatic Progression Patterns

We have collected a detailed dataset of <!-- num patients --> patients with newly diagnosed oropharyngeal squamous cell carcinomas. It reports the involvement of every patient individually and per lymph node level in tabular form, in addition to other clinico-pathological information such as age, T-category, and HPV p16 status.

Their patient records have been collected at four different institutions and a brief overview over some of their patients' characteristics are shown in @tbl-data-overview. Note that the data from the Inselspital Bern and the Centre Léon Bérard only consists of patients treated with some form of neck dissection. Since this treatment is more commonly chosen for early T-category patients, they also make up a larger portion of the respective dataset.

```{python}
#| echo: false
#| label: tbl-data-overview
#| tbl-cap: Overview over the five datasets from four different institutions used to train and evaluate our model. Here, we briefly characterize the total number of OPSCC patients from the respective institution, their median age, what proportion received some form of neck dissection, the N0 portion of patients, what percentage presented with early T-category, and the prevalence of primary tumor midline extension. For a much more detailed look at the data, visit [lyprox.org](https://lyprox.org).
from typing import Literal

def align(
  column: pd.Series,
  where: Literal["right", "left", "center"],
) -> list[str]:
  """Align a column."""
  return [f"text-align: {where}"] * len(column)

def right_align(column: pd.Series) -> list[str]:
  """Right align column."""
  return align(column, where="right")

def highlight_bool(
  column: pd.Series,
  c_false: str = COLORS["green"],
  c_true: str = COLORS["red"],
) -> list[str]:
  """Make cell read (`False`) or green (`True`)."""
  n = len(column)
  trues = pd.Series([c_true] * n)
  falses = pd.Series([c_false] * n)
  colors = trues.where(column, falses)
  return colors.map(lambda x: f"color: {x}")

def highlight_t_stage(
  column: pd.Series,
  c_early: str = COLORS["green"],
  c_late: str = COLORS["red"],
) -> list[str]:
  """Highlight `early` and `late`."""
  is_early = column == "early"
  return highlight_bool(is_early, c_false=c_late, c_true=c_early)


col_map = {
  COL.inst: "Institution",
  COL.age: "Age",
  COL.nd: "Neck Dissection",
  COL.t_stage: "T-category",
  COL.n_stage: "N-category",
}
short_col_map = {tpl[-1]: val for tpl, val in col_map.items()}

raw = utils.load_patient_data(paths.data)
subdata = raw[col_map.keys()]
subdata.columns = subdata.columns.get_level_values(2)
subdata = (
  subdata
  .rename(columns=short_col_map)
  .reset_index(drop=True)
)

def n0_mean(n_stage: pd.Series) -> float:
  """Compute portion of N0 patients."""
  return (n_stage == 0).mean()

def early_mean(t_stage: pd.Series) -> float:
  """Compute early T-category portion."""
  return t_stage.isin([0,1,2]).mean()

grouped = (
  raw.groupby(
    by=COL.inst,
  ).aggregate(**{
    "Total": pd.NamedAgg(column=COL.age, aggfunc="count"),
    "Age (median)": pd.NamedAgg(column=COL.age, aggfunc="median"),
    "Neck Dissection": pd.NamedAgg(column=COL.nd, aggfunc="mean"),
    "N0": pd.NamedAgg(column=COL.n_stage, aggfunc=n0_mean),
    "Early T-Cat.": pd.NamedAgg(column=COL.t_stage, aggfunc=early_mean),
    "Mid. Ext.": pd.NamedAgg(column=COL.midext, aggfunc="mean"),
  }).convert_dtypes()
)
grouped.index.name = "Institution"
(
  grouped
  .reset_index()
  .style
  .format(
    formatter="{:>.0%}",
    subset=["Neck Dissection", "N0", "Early T-Cat.", "Mid. Ext."],
  )
  .apply(
    func=right_align,
    axis="index",
    subset=grouped.columns[0:],
  )
  .hide()
)
```


## Contralateral Involvement Prevalence {#sec-data-strat}

These datasets allow us to investigate correlations between the involvement of individual LNLs, or between risk factors and patterns of involvement. In @fig-data-strat, we have plotted the prevalence of each contralateral LNL's involvement, stratified by T-category, ipsilateral number of involved LNLs, and whether the tumor extended over the mid-sagittal line. A similar but more complete stratification is also tabulated in the appendix in @tbl-data-strat.

{{< embed data.qmd#fig-data-strat >}}

The left panel in @fig-data-strat indicates that T-category is correlated with contralateral involvement (as it is with overal involvement). This is simply because T-category may on average be considered a surrogate for the time between onset of disease and diagnosis. I.e., a patient with a T4 tumor was -- on average -- diagnosed later than a patient with a T1 tumor. Thus, the former did have more time to develop metastases.

Similarly, ipsilateral involvement correlates with contralateral metastasis. The tumor of a patients with many metastases in ipsilateral LNLs was probably able to spread for longer (or faster) compared to a tumor in a patient with no nodal disease. This, too, may therefore be considered a surrogate for the duration of the disease. In rare cases, bulky nodal disease ipsilaterally may also redirect lymph fluids to the contralateral side. <!-- citation needed? -->

Lastly, the right panel in @fig-data-strat shows that patients with a tumor crossing the mid-sagittal line show contralateral involvement vastly more often compared to patients with clearly lateralized tumors. This makes intutitive sense, because the lymphatic system in the head and neck region is typically symmetric and thus no major vessels cross the midline. Therefore, interstitial fluids from the primary tumor -- which we assume to carry living malignant cells -- may only reach the blind-ended lymphatic vessels in the contralateral neck via short-ranged diffusion. Which in turn is only possible when the primary tumor is close enough to the mid-sagittal line or crosses it. <!-- citation(s) needed? or is this intuition good enough? -->


## Requirements for a Bilateral Model

Based on the observations of the [previous section](#sec-data-strat), any potential model that aims to also predict the risk for contralateral nodal involvement, should be able to take the following into account:

1. More advanced T-category should lead to higher risk for nodal disease. One approach to achieve this via the expected time of diagnosis has already been developed in the form of a hidden Markov model [@ludwig_hidden_2021].
2. The degree of ipsilateral involvement should give the model information on the time that may have passed between onset and diagnosis of the disease. This should come in addition to what can be inferred about this time from T-category alone.
3. A tumor that extends over the mid-sagittal line should yield contralateral metastases with much higher probability.

Over the course of this work, we will first briefly recap the mentioned HMM in @sec-unilateral, which was so far used to model ipsilateral lymphatic progression only. Then, we intuitively extend it to include the contralateral side as well in @sec-ext-to-contra. In this section, we also introduce a way of modelling the tumor's midline extension as a random variable (@sec-midline) and lastly talk about how it may affect the contralateral spread in @sec-params-symmetry.

<!-- TODO: Hint at methods and results... -->


## Data Availability

The entire data, including additional patients with tumors in other primary locations than the oropharynx, is publicly available: It may be [downloaded from LyProX](https://lyprox.org/patients/dataset) where it can be interactively explored too, [from GitHub](https://github.com/rmnldwg/lydata), [from zenodo](https://zenodo.org/search?q=lydata), or via the *Data-in-Brief* publications @ludwig_dataset_2022 and @ludwig_multicentric_2023. Although these publications do not include the most recent dataset addition from Vall d'Hebron Barcelona Hospital.


# Unilateral Model for Lymphatic Progression {#sec-unilateral}

![Directed acyclic graph (DAG) representing the abstract lymphatic network in the head and neck region. Blue nodes are the LNLs' hidden random variables, the red node represents the tumor, and the orange square nodes depict the binary observed variables. Red and blue arcs symbolize the probability of lymphatic spread along that edge during one time-step. The orange arcs represent the sensitivity and specificity of the observational modality (e.g. CT, MRI, pathology, ...).](static/small-graph.png){#fig-small-graph width=60%}

Our first model to predict the lymphatic progression of HNSCC was introduced using Bayesian networks [@pouymayou_bayesian_2019]. We subsequently extended this work to a hidden Markov model (HMM) [@ludwig_hidden_2020]. We will briefly summarize this HMM's formalism before building on it to include the contralateral spread in @sec-ext-to-contra.

We model a patient's state of involvement at an abstract time-step $t$ as a vector of hidden binary random variables:

$$
\mathbf{X}[t] = \begin{pmatrix} X_v[t] \end{pmatrix} \qquad v \in \left\{ 1, 2, \ldots, V \right\}
$$

Here, $V$ is the number of LNLs the model considers. The values a LNL's hidden binary RV may take on are $X_v[t] = 0$ (`False`), meaning the LNL $v$ is healthy or free of metastatic disease, or $X_v[t] = 1$ (`True`), corresponding to some for of tumor presence (i.e., occult or clinical).

Since the state vector $\mathbf{X}[t]$ is $V$-dimensional and binary, there are $2^V$ distinct possible lymphatic involvement patterns, which we enumerate from $\boldsymbol{\xi}_0 = \begin{pmatrix} 0 & 0 & \cdots & 0 \end{pmatrix}$ to $\boldsymbol{\xi}_{2^V} = \begin{pmatrix} 1 & 1 & \cdots & 1 \end{pmatrix}$.

Any hidden Markov model is fully described by three quantities:

1. A starting state $\mathbf{X}[t=0]$ at time $t=0$ just before the patient's tumor formed. In our case, this is always the state where all LNLs are still healthy $\boldsymbol{\xi}_0$.
2. The *transition matrix*
   $$
   \mathbf{A} = \left( A_{ij} \right) = \big( P \left( \mathbf{X}[t+1] = \boldsymbol{\xi}_j \mid \mathbf{X}[t] = \boldsymbol{\xi}_i \right) \big)
   $$
   where the value at row $i$ and column $j$ represents the probability to transition from state $\boldsymbol{\xi}_i$ to $\boldsymbol{\xi}_j$ during the time-step from $t$ to $t+1$. Note that we prohibit self-healing, meaning that during a transition, no LNL may change their state from $X_v[t]=1$ to $X_v[t+1]=0$. This effectively masks large parts of the transition matrix to be zero.
3. Lastly, the *observation matrix*
   $$
   \mathbf{B} = \left( B_{ij} \right) = \big( P \left( \mathbf{Z} = \boldsymbol{\zeta}_j \mid \mathbf{X}[t_D] = \boldsymbol{\xi}_i \right) \big)
   $$
   where in row $i$ and at column $j$ we find the probability to *observe* a lymphatic involvement pattern $\mathbf{Z} = \boldsymbol{\zeta}_j$, given that the true (but hidden) state of involvement at the time of diagnosis $t_D$ is $\mathbf{X}[t_D] = \boldsymbol{\xi}_i$.

The transition matrix $\mathbf{A}$ is parametrized using the spread probabilities of a directed acyclic graph (DAG) that we define as the underlying mechanistic representation of the lymphatic network. An example of such a DAG is shown in @fig-small-graph.

Using the introduced quantities, we can evolve the distribution of all possible hidden states from $\mathbf{X}[t=0] = \boldsymbol{\xi}_0$ step by step, by successively multiplying this vector with the transition matrix $\mathbf{A}$. At the time of the diagnosis, we multiply the result with the observation matrix $\mathbf{B}$. We may then look up the likelihood of a patient presenting with the diagnosis $\mathbf{Z}=\boldsymbol{\zeta}_i$ in the $i$-th entry of the final result.

However, the remaining issue is that we do not know how many time-steps to apply. Although a time-step should be considered an abstract quantity that is relative to the tumor's time-frame, we have no way of measuring it directly. Hence, we rely on a surrogate: T-category depends mostly on the size of the tumor [@brierley_tnm_2017] and may therefore represent for how long it has been growing and also spreading lymphatically.

We still want to allow for cases where early T-category tumors have already spread extesively to the lymph nodes or where advanced T-category patients present with an N0 neck. These cases may be relatively rare, but not implausible. Hence, we marginalize over the time of diagnosis and choose different distributions for different (groups of) T-categories.

<!-- TODO: Explain here what role our model plays in a Bayesian context. -->

$$
P \left( \mathbf{X} \mid \mathbf{Z} \right) = \frac{P \left( \mathbf{Z} \mid \mathbf{X} \right) P \left( \mathbf{X} \right)}{P \left( \mathbf{Z} \right)}
$$ {#eq-uni-bayes-law}

Let us for later use define the matrices $\boldsymbol{\Lambda}$:

$$
\boldsymbol{\Lambda} = P \left( \mathbf{X} \mid \mathbf{t} \right) = \begin{pmatrix}
\boldsymbol{\pi}^\intercal \cdot \mathbf{A}^0 \\
\boldsymbol{\pi}^\intercal \cdot \mathbf{A}^1 \\
\vdots \\
\boldsymbol{\pi}^\intercal \cdot \mathbf{A}^{t_\text{max}} \\
\end{pmatrix}
$$ {#eq-lambda-matrix}

The $n$-th row in this matrix corresponds to the distribution over hidden states after $t=n-1$ time-steps.


# Extension to a Bilateral Model {#sec-ext-to-contra}

A naive approach to model the contralateral lymphatic spread would be to simply employ two independent unilateral models as introduced in @sec-unilateral. During training, one could even enforce some shared parameters between these two models, like the parameterization of the distributions over diagnose times or the spread among the LNLs. Additionally, we could think of an approach to incorporate the primary tumor's mid-sagittal extension as a risk factor.

However, this approach lacks a way to describe the correlation between ipsi- and contralateral involvement. This is displayed in @tbl-data-strat and shows how often the contralateral LNLs I, II, III, and IV were involved, given all possible combinations of midline extension, T-category, and ipsilateral LNL III involvement. Unsurprisingly, the prevalence for contralateral involvement is consistently higher when the tumor extends over the mid-sagittal line or is of later T-category. But it is also more frequent when the ipsilateral side shows more severe involvement, which is here shown via the surrogate LNL III.


Thus, we attempt to extend the formalism in @sec-unilateral in such a way that the model's ipsi- and contralateral side evolve synchronously. To achieve that, we start by writing down the posterior distribution of involvement an analogy to @eq-uni-bayes-law, which is now a joint probability of an involvement $\mathbf{X}^\text{i}$ ipsilaterally *and* an involvement $\mathbf{X}^\text{c}$ contralaterally, given a diagnosis of the ipsilateral LNLs $\mathbf{Z}^\text{i}$ and of the contralateral ones $\mathbf{Z}^\text{c}$:

$$
P \left( \mathbf{X}^\text{i}, \mathbf{X}^\text{c} \mid \mathbf{Z}^\text{i}, \mathbf{Z}^\text{c} \right) = \frac{P \left( \mathbf{Z}^\text{i}, \mathbf{Z}^\text{c} \mid \mathbf{X}^\text{i}, \mathbf{X}^\text{c} \right) P \left( \mathbf{X}^\text{i}, \mathbf{X}^\text{c} \right)}{P \left( \mathbf{Z}^\text{i}, \mathbf{Z}^\text{c} \right)}
$$

The likelihood of the diagnoses given a hidden state simply factorise: $P \left( \mathbf{Z}^\text{i}, \mathbf{Z}^\text{c} \mid \mathbf{X}^\text{i}, \mathbf{X}^\text{c} \right) = P \left( \mathbf{Z}^\text{i} \mid \mathbf{X}^\text{i} \right) \cdot P \left( \mathbf{Z}^\text{c} \mid \mathbf{X}^\text{c} \right)$. And the two factors are contained in the observation matrices $\mathbf{B}^\text{i}$ and $\mathbf{B}^\text{c}$.

The term representing the model's prior probability of hidden involvement does not factorize. However, if we assume that lymphatic spread typically does not cross the mid-sagittal line, we can write it as a factorising sum:

$$
\begin{aligned}
P \left( \mathbf{X}^\text{i}, \mathbf{X}^\text{c} \right) &= \sum_{t=0}^{t_\text{max}} P(t) \cdot P \left( \mathbf{X}^\text{i}, \mathbf{X}^\text{c} \mid t \right) \\
&= \sum_{t=0}^{t_\text{max}} P(t) \cdot P \left( \mathbf{X}^\text{i} \mid t \right) \cdot P \left( \mathbf{X}^\text{c} \mid t \right)
\end{aligned}
$$ {#eq-bilateral-marginal}

This assumption makes intuitive sense: The two sides of the lymphatic network in a typical patient are approximately mirror images of each other. Thus, no major vessels cross the mid-sagittal line. There may, however, be diffusion of lymph fluid accross this line or bulky involvement that redirects lymphatic drainage significantly.

Using this assumption along with @eq-lambda-matrix, we can write the above distribution algebraically as a product:

$$
P \left( \mathbf{X}^\text{i} = \boldsymbol{\xi}_n, \mathbf{X}^\text{c} = \boldsymbol{\xi}_m \right) = \left[ \boldsymbol{\Lambda}^\intercal_\text{i} \cdot \operatorname{diag} P(\mathbf{t}) \cdot \boldsymbol{\Lambda}_\text{c} \right]_{n,m}
$$ {#eq-bilateral-marginal-algebra}


## Modelling Midline Extension {#sec-midline}

To account for the increased prevalence of involvement on the contralateral side when the tumor is not clearly lateralized anymore, we also model the tumor's extension over the mid-sagittal line as a binary random variable. It starts lateralized and at every time-step there is a finite probability $p_\epsilon$ that the tumor grows over the symmetry plane of the patient.

Technically, the introduction of this additional random variable doubles the space of the hidden states and therefore quadruples the size of the transition matrix $\mathbf{A}$. However, since we assume no correlation between the tumor's lateralization and the metastases in the LNLs, we can evolve the two parts separately.

The probabilities to find a patient with a clearly lateralized tumor or one that extends over the mid-sagittal line after $t$ time-steps are then given by

$$
\begin{aligned}
P(\epsilon = \texttt{False} \mid t) &= (1 - p_\epsilon)^t \\
P(\epsilon = \texttt{True} \mid t) &= 1 - P(\epsilon = \texttt{False} \mid t)
\end{aligned}
$$

To get the joint probability over the ipsi- and contralateral hidden states, as well as the state of the tumor's midline extension $P \left( \mathbf{X}^\text{i}, \mathbf{X}^\text{c}, \epsilon \right)$, we simply add the above terms to the marginalization in @eq-bilateral-marginal:

$$
P \left( \mathbf{X}^\text{i}, \mathbf{X}^\text{c}, \epsilon \right) = \sum_{t=0}^{t_\text{max}} P(t) \cdot P(\epsilon \mid t) \cdot P \left( \mathbf{X}^\text{i} \mid t \right) \cdot P \left( \mathbf{X}^\text{c} \mid t \right)
$$

Again, this can be written algebraically, by defining the vector $P(\mathbf{t}, \epsilon) = P(\mathbf{t}) \cdot P(\epsilon \mid \mathbf{t})$, to achieve the same form as in @eq-bilateral-marginal-algebra:

$$
P \left( \mathbf{X}^\text{i} = \boldsymbol{\xi}_n, \mathbf{X}^\text{c} = \boldsymbol{\xi}_m, \epsilon \right) = \left[ \boldsymbol{\Lambda}^\intercal_\text{i} \cdot \operatorname{diag} P(\mathbf{t}, \epsilon) \cdot \boldsymbol{\Lambda}_\text{c} \right]_{n,m}
$$

In @fig-midext-evo, we visualize how the prior distribution over diagnose times $P(t)$, the conditional probability of midline extension $P(\epsilon \mid t)$, and their joint $P(\epsilon, t)$ evolve over the course of a patient evolution.

```{python}
#| echo: false
#| label: fig-midext-evo
#| fig-cap: The top panel shows the prior probability to get diagnosed at time-step $t$ for early and late T-category tumors as bars. Also in the top panel, we plot the conditional probability of the tumor's midline extension ($\epsilon=\texttt{True}$), given the time-step $t$ as a line plot. In the bottom panel, we show the joint probability of getting diagnosed in time-step $t$ *and* having a tumor that crosses the midline.
t = np.linspace(0, 10, 11)
p_midline = {
  "lateralized": (1 - midline_model.midext_prob)**t,
  "extension": 1 - (1 - midline_model.midext_prob)**t,
}
dist = {
  "early": midline_model.get_distribution("early").pmf,
  "late": midline_model.get_distribution("late").pmf,
}
p_colors = {"lateralized": COLORS["green"], "extension": COLORS["red"]}
t_colors = {"early": COLORS["blue"], "late": COLORS["orange"]}
markers = {}

nrows, ncols = 2, 1
plt.rcParams.update(shared.get_fontsizes())
plt.rcParams.update(shared.get_figsizes(
  nrows=nrows,
  ncols=ncols,
  width=half,
  aspect_ratio=2.5,
))

fig, axes = plt.subplots(nrows=nrows, ncols=ncols, sharex=True)
w = 0.3

for label, p in p_midline.items():
  axes[0].plot(
    t, p_midline[label], "o-",
    label=f"cond. prob. $P(\epsilon={label=='extension'} \mid t)$",
    color=p_colors[label],
  )
  for i, t_stage in enumerate(["early", "late"]):
    if label == "lateralized":
      axes[0].bar(
        t + i*w - w/2, dist[t_stage],
        color=t_colors[t_stage],
        width=w,
        label=f"{t_stage} T-cat. prior $P(t)$",
      )
    axes[1].plot(
      t, p * dist[t_stage], "o-",
      c=p_colors[label],
      mfc=t_colors[t_stage],
      mec=t_colors[t_stage],
      label=f"{label} ($\epsilon={label=='extension'}$) for {t_stage} T-cat.",
    )

axes[0].set_ylim(0., 1.)
axes[0].yaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.0%}"))
axes[0].set_ylabel("probability")
axes[0].grid(axis="y", color=COLORS["gray"], alpha=0.5)

axes[0].legend()

axes[1].set_xlim(min(t), max(t))
axes[1].set_xticks(t)
axes[1].set_xlabel("time-step $t$")

axes[1].set_ylim(0., 0.25)
axes[1].yaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.0%}"))
axes[1].set_ylabel("joint probability $P(\epsilon, t)$")
axes[1].grid(axis="y", color=COLORS["gray"], alpha=0.5)

axes[1].legend()

plt.show()
```


## Parameter Symmetries {#sec-params-symmetry}

In general, the matrices $\boldsymbol{\Lambda}_\text{i}$ and $\boldsymbol{\Lambda}_\text{c}$ could be parameterized using a disjoint set of parameters. I.e., the ipsi- and contralateral spread rates are entirely different. However, using two sensible assumptions, we can reduce the parameter space by sharing some parameters between the sides:

1. We assume the spread *among* the LNLs to be same on both sides. It is reasonable to assume the lymphatic system is symmetric. Thus, the spread rates from one LNL to the other should be symmetric, too. Formally, this means \
   $$
   \begin{aligned}
   b_v^\text{c} &\neq b_v^\text{i} \\
   t_{rv}^\text{c} &= t_{rv}^\text{i}
   \end{aligned}
   $$ {#eq-symmetries}
   for all $v \leq V$ and $r \in \operatorname{pa}(v)$.
2. The tumor's spread to the contralateral side in case of an extension over the midline is larger than if it was clearly lateralized, but smaller than its spread to the ipsilateral side. This assumption stems from a simple thought experiment: Consider moving the tumor from a clearly lateralized position accross the mid-sagittal plane to the same position, but on the contralateral side. In the beginning we would have $b_v^\text{c} < b_v^\text{i}$, while in the end, the situation is reversed. If a tumor extends over the mid-sagittal line, its contralateral spread rate can be expected to be in between these two extremes. We encode this in a *mixing parameter* $\alpha$ that captures a "degree of asymmetry": \
   $$
   b_v^{\text{c},\epsilon=\texttt{True}} = \alpha \cdot b_v^\text{i} + (1 - \alpha) \cdot b_v^{\text{c},\epsilon=\texttt{False}}
   $$ {#eq-mixing}
   This means the model now uses three different sets of parameters to describe the spread from the tumor to the LNLs: $b^\text{i}_v$ for the spread to the ipsilateral LNLs, $b_v^{\text{c},\epsilon=\texttt{False}}$ for the spread to the contralateral LNLs as long as the tumor is clearly lateralized, and finally $b_v^{\text{c},\epsilon=\texttt{True}}$ when it crosses the midline. Note, however, that these three sets of spread rates only account for $2 \cdot 2^V + 1$ parameters, since they are coupled via the mixing parameter $\alpha$.

Together with the explicit modelling of the tumor's midline extension $\epsilon$ from @sec-midline, we now have a model that may be capable of capturing the higher prevalence of contralateral involvment that comes with tumors extending over the mid-sagittal line.


# Methods

We compared three different aprroaches to modelling the contralateral involvement in OPSCC:

1. A naive model of the contralateral side only. Neither the patterns of ipsilateral involvement, nor the information on whether the patients' tumors crossed the mid-sagittal line enter this model.
2. The bilateral model as introduced in the sections up to and including @sec-params-symmetry. The involvement patterns of both sides enter this model, but not whether the tumors extended the midline.
3. An additional bilateral model that tracks the midline extension of the patients' tumors as a random variable. This includes the formalism introduced up to and including @sec-midline. In contrast to the other two models, it does consider the reported midline extension in the data to attempt a more accurate prediction of the risk for contralateral occult disease.

## MCMC Sampling {#sec-sampling}

- all models initialized with the same settings
  - same graph
  - same data
  - same distributions over diagnose time
- parameter samples were drawn for all three models:
  - the sampling used {{< var sampling.walkers_per_dim >}} walkers per parameter space dimension.
  - Every {{< var sampling.check_interval >}} steps, convergence was checked
  - convergence was reached when two criteria were met:
      1. the relative difference between subsequent autocorrelation estimates of the chain does not change more than {{< var sampling.rel_thresh |  >}}.
      2. the autocorrelation estimate of the chain drops below the length of the chain divided by {{< var sampling.trust_fac >}}.
  - after convergence, {{< var sampling.nsteps >}} samples (from the parallel walkers) were drawn that were spaced {{< var sampling.thin >}} steps apart, resulting in `num params x {{< var sampling.walkers_per_dim >}} x {{< var sampling.nsteps >}}` parameter samples.

For every model, we compare the predicted prevalence of a certain scenario to how often this scenario is seen in the data. The considered scenarios are choosen to test if the models can take into account T-category, the correlation of ipsi- and contralateral involvement, and the primary tumor's lateralization (whether or not it extends over the mid-sagittal line).

- [ ] list and describe the scenarios


# Results

```{python}
#| echo: false
#| label: fig-burnin-history 
#| fig-cap: Monitoring quantities during the burn-in phase of the parameter sampling.
from collections import namedtuple

def custom(x, pos):
  return "{:.1f}".format(x/1000)

nrows, ncols = 1, 3
label_map = {
  "acor_times": "autocorrelation [steps]",
  "accept_fracs": "acceptance fraction [%]",
  "max_log_probs": r"max. log-likelihood [$\times 10^3$]",
}

plt.rcParams.update(shared.get_fontsizes())
plt.rcParams.update(shared.get_figsizes(
  nrows=nrows,
  ncols=ncols,
  aspect_ratio=1.,
  width=full,
))

fig, axes = plt.subplots(
  nrows=nrows,
  ncols=ncols,
  sharex=True,
)

for model in ["contra", "bilateral", "midline"]:
  history = pd.read_csv(f"models/{model}/history.csv").set_index("steps")
  for i, column in enumerate(history.columns):
    history.plot(y=column, ax=axes[i], label=model)
    axes[i].autoscale(enable=True, tight=True, axis="x")
    axes[i].set_ylabel(label_map[column])
    axes[i].xaxis.set_major_formatter(ticker.FuncFormatter(custom))
    axes[i].set_xlabel(r"steps [$\times 10^3$]")

axes[1].yaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.0%}"))
axes[2].yaxis.set_major_formatter(ticker.FuncFormatter(custom))
plt.show()
```

@Fig-burnin-history is only a temporary placeholder for now.

## Prevalence Comparisons

First, we look at the prevalence of contralateral involvement for the LNLs II, III, and IV. The three models' predictions are plotted against beta posteriors of the observed prevalence in the data in @fig-prevalences-overall, both for early and advanced T-category.

The beta posteriors (drawn as lines in @fig-prevalences-overall) are a convenient way of indicating not only the percentage of patients that presented with any given involvement, T-category, and/or other characteristics, which sits at the maximum of the beta distribution. It also shows the size of the population via its variance: If we observe e.g. 3 out of 10 patients to have contralateral LNL II involvement when the primary tumor is of advanced T-stage, then we cannot be particularly sure about that rate to be truly 30%. However, when we observe 300 out of 1000, we can be much more certain. A beta posterior intuitively reflects that in its width and is thus better suited to display such data than e.g. a vertical line only.

The shaded histograms in @fig-prevalences-overall show the corresponding prevalence as computed by one of our models. They are formed by computing the prevalence for a number of parameter samples drawn during the MCMC learning process, as detailed in @sec-sampling. If both the location and width of the histograms matches those of the beta posteriors, then our model is both accurate and precise enough to describe the data.

```{python}
#| echo: false
#| label: fig-prevalences-overall
#| fig-cap: Prevalences of contralateral LNL involvement for different scenarios and the three considered models. The colored histograms show the computed distribution over the prevalence of involvment in the contralateral levels II (blue), III (orange), and IV (red). Each model's prediction is shown in a separate column, while the rows show these prevalences computed for early (top row) and advanced T-category (bottom row) respectively. The lines depict beta-posteriors over the observed prevalence of the corresponding scenario using a uniform prior. Its maximum coincides with the percentage of patients with the involvement of interest and its width indicates how many patients were considered in total.
from itertools import cycle
from lyscripts.scenario import Scenario
from lyscripts.plot.utils import draw, BetaPosterior, Histogram, COLORS

scenarios_config = utils.load_yaml_params("scenarios/overall.yaml")
scenarios = Scenario.list_from_params(scenarios_config)

nrows, ncols = 2, 3

plt.rcParams.update(shared.get_fontsizes())
plt.rcParams.update(shared.get_figsizes(
  nrows=nrows,
  ncols=ncols,
  width=full,
))

fig, axes = plt.subplots(nrows=nrows, ncols=ncols, sharex="col")

axes[0,0].set_ylabel("early")
axes[-1,0].set_ylabel("advanced")

for col, model in enumerate(["contra", "bilateral", "midline"]):
  axes[0,col].set_title(model)
  axes[-1,col].set_xlabel("prevalence [%]")
  for row, t_stage in enumerate(["early", "late"]):
    content = []
    color_cycle = cycle(COLORS.values())
    lnls = iter(["II", "III", "IV"])
    for scenario in scenarios:
      if not t_stage in scenario.t_stages:
        continue

      if model == "contra":
        scenario = scenario.from_dict(
          scenario.as_dict("prevalences"),
          is_uni=True,
          side="contra",
        )

      color = next(color_cycle)
      content += [
        Histogram.from_hdf5(
          filename=paths.get_filename(
            model=model,
            kind="prevalences_overall",
          ),
          dataname=scenario.md5_hash("prevalences"),
          color=color,
          label=f"contra LNL {next(lnls)}"
        ),
        BetaPosterior.from_hdf5(
          filename=paths.get_filename(
            model=model,
            kind="prevalences_overall",
          ),
          dataname=scenario.md5_hash("prevalences"),
          color=color,
        ),
      ]
    draw(
      axes=axes[row,col],
      contents=content,
      percent_lims=(2., 2.),
      xlims=(0., 27.)
    )
    axes[row,col].set_yticks([])

axes[0,0].legend(labelspacing=0.2)
axes[-1,-1].legend(labelspacing=0.2)
```

At first, from @fig-prevalences-overall it appears as if the simpler, naive, unilateral-only model describes the prevalence of contralateral involvement better than the bilateral model and even the more complex model that tracks midline extension of the primary tumor.

- [ ] make the data in the paragraph below dynamic

This is mainly due to the early/advanced T-category split of the ipsi- and contralateral side: All models use two different distributions for early and advanced T-category to marginalize over the diagnose times (as introduced in the recap of @sec-unilateral). But only the two bilateral models need to balance these distributions to describe the ipsi- and contralateral involvement simultaneaously. As can be seen in the second and third column of @fig-prevalences-overall, the prevalence of e.g. contralateral LNL II involvement in the data (blue lines) increases from 8% (39 out of 473) to 24% (88 out of 360). Which is more than the model predicts (blue histograms). Ipsilaterally, however, the involvement of LNL II increases from 71% (343 out of 473) to only 76% (276 out of 360). This much weaker increase is well capured by the models.

This issue is quickly resolved, though, as we consider other risk factors that correlate with T-category: Both the ipsilateral involvement and the tumor's extension over the mid-sagittal line influence -- the latter probably even causally -- the extent of contralateral involvement, as shown in @tbl-data-strat. Both these risk factors cannot be considered by the contralateral-only model. We should thus expect this naive model to perform worse, as soon as we investigate ipsilateral involvement and midline extension.

```{python}
#| echo: false
#| label: fig-prevalences-ipsi
#| fig-cap: Contralateral prevalences when taking ipsilateral invovlement into account.
scenarios_config = utils.load_yaml_params("scenarios/with_ipsi.yaml")
scenarios = Scenario.list_from_params(scenarios_config)

nrows, ncols = 2, 3

plt.rcParams.update(shared.get_fontsizes())
plt.rcParams.update(shared.get_figsizes(
  nrows=nrows,
  ncols=ncols,
  width=full,
))

fig, axes = plt.subplots(nrows=nrows, ncols=ncols, sharex="col")

axes[0,0].set_ylabel("early")
axes[-1,0].set_ylabel("advanced")

for col, model in enumerate(["contra", "bilateral", "midline"]):
  axes[0,col].set_title(model)
  axes[-1,col].set_xlabel("prevalence [%]")
  for row, t_stage in enumerate(["early", "late"]):
    content = []
    color_cycle = cycle(COLORS.values())
    lnls = iter(["II", "III", "IV"])
    for scenario in scenarios:
      if not t_stage in scenario.t_stages:
        continue

      if model == "contra":
        scenario = scenario.from_dict(
          scenario.as_dict("prevalences"),
          is_uni=True,
          side="contra",
        )

      color = next(color_cycle)
      content += [
        Histogram.from_hdf5(
          filename=paths.get_filename(
            model=model,
            kind="prevalences_with_ipsi",
          ),
          dataname=scenario.md5_hash("prevalences"),
          color=color,
          label=f"contra LNL {next(lnls)}"
        ),
        BetaPosterior.from_hdf5(
          filename=paths.get_filename(
            model=model,
            kind="prevalences_with_ipsi",
          ),
          dataname=scenario.md5_hash("prevalences"),
          color=color,
        ),
      ]
    draw(
      axes=axes[row,col],
      contents=content,
      percent_lims=(2., 2.),
      xlims=(0., 27.)
    )
    axes[row,col].set_yticks([])

axes[0,0].legend(labelspacing=0.2)
axes[-1,-1].legend(labelspacing=0.2)
```


## Parameter Estimates

```{python}
#| echo: false
#| label: tbl-midline-params
#| tbl-cap: Mean sampled parameter estimates of the midline model and the respective standard deviation.
def map_param_names(name: str) -> str:
  """Make parameter names more readable."""
  try:
    return {
      "midext_prob": "Mid. ext. probability",
      "mixing": "Mixing ⍺",
      "late_p": "late T-cat. binom. prob.",
    }[name]
  except KeyError:
    return re.sub(
      r"(ipsi|contra)_", r"\g<1>: ", name
    ).replace(
      "to", " ➜ "
    ).replace(
      "_spread", ""
    )

model = shared.get_model(which="midline", load_samples=True)
samples = shared.get_samples(which="midline")

names = [map_param_names(p) for p in model.get_params()]
means, stds = samples.mean(axis=0), samples.std(axis=0)

early_midext_prob = model.state_dist(t_stage="early")[1].sum()
late_midext_prob = model.state_dist(t_stage="late")[1].sum()

params_table = pd.DataFrame({"Parameter": names, "Mean": means, "Std. Dev.": stds})
(
  params_table.style
  .format("{:.2%}", subset=["Mean"])
  .format("± {:.2%}", subset=["Std. Dev."])
  .apply(right_align, subset=["Mean", "Std. Dev."])
  .hide()
)
```

The predicted prevalence of midline extension for early T-category tumors is <!-- insert computational code later -->. For a late T-category tumor, it is <!-- insert computational code later -->.

In the data, the prevalence of midline extension for early T-category tumors is <!-- insert computational code later -->. For late T-category tumors it is <!-- insert computational code later -->.

- Discrepancy between data and model is due to late T-stage's time prior
- still tied to other parameters
- cannot fully represent spread of midline extension and also represent spread params


## Distributions over States

```{python}
plt.rcdefaults()

mi = pd.MultiIndex.from_product(
  [[False, True]] * len(midline_model.ext.ipsi.graph.lnls),
  names=midline_model.ext.ipsi.graph.lnls.keys(),
)
series = pd.Series(midline_model.ext.ipsi.state_dist(), index=mi)
upsetplot.plot(
  series,
  sort_by="cardinality",
  sort_categories_by="-input",
)
plt.show()
```


# Acknowledgement {.appendix}

This work was supported by:

- the Clinical Research Priority Program "Artificial Intelligence in Oncological Imaging" of the University of Zurich
- the Swiss Cancer Research Foundation under grant number KFS 5645-08-2022


# Appendix {.appendix}

```{python}
#| echo: false
#| label: tbl-data-strat
#| tbl-cap: Contralateral involvement depending on whether the primary tumor extends over the mid-sagittal line, the T-category, and whether the ipsilateral LNL III was involved or healthy.
data = raw.copy()
data[COL.t_stage] = data[COL.t_stage].apply(lambda x: "early" if x <= 2 else "late")
early_midext_data = (data.loc[data[COL.t_stage] == "early", COL.midext] == True).mean()
late_midext_data = (data.loc[data[COL.t_stage] == "late", COL.midext] == True).mean()
grouped = data.groupby(by=[COL.midext, COL.t_stage, COL.ipsi_III])

lnl_cols = get_lnl_cols("contra", lnls=["I", "II", "III", "IV"])
total = grouped.count()[lnl_cols]["max_llh", "contra"]
idx = total.index.rename(["Mid. ext.", "T-cat.", "ipsi III"])

num_involved = grouped.sum()[lnl_cols]["max_llh", "contra"]
percent_involved = num_involved / total
total.index = idx
num_involved.index = idx
percent_involved.index = idx

involved = num_involved.join(
  100 * percent_involved,
  rsuffix=" (%)",
).sort_index(axis="columns")
involved.columns = pd.MultiIndex.from_product(
  [["I", "II", "III", "IV"],
   ["n", "%"]],
  names=["LNL", ""]
)
(
  involved
  .reset_index()
  .style
  .format(precision=2)
  .apply(right_align, subset=involved.columns[0:])
  .apply(highlight_bool, subset=["Mid. ext.", "ipsi III"])
  .apply(highlight_t_stage, subset=["T-cat."])
  .hide()
)
```
